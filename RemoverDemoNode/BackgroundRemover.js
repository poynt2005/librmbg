"use strict";var e=require("child_process"),t=require("fs"),n=require("path"),r=require("os");function i(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,Object.freeze(t)}var s=i(e);class o extends Error{constructor(e){super(),this.name="RuntimeError",this.message=e||"Error running the current script",this.stack=(new Error).stack}}const a=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))},l=["BackgroundRemover.node","librmbg.dll","python3.dll","python310.dll"],c=["vcruntime140.dll"],u=(l.forEach((e=>{if(!t.existsSync(e))throw new o(`runtime dll: ${e} is not exists`)})),(()=>{const e=`\n  $csCode = @"\n  using System;\n  using System.Runtime.InteropServices;\n  using System.Collections.Generic;\n  using System.Linq;\n  namespace Utils {\n    public static class Utils {\n      [DllImport("kernel32", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]\n      private static extern IntPtr LoadLibraryA(string lpLibFileName);\n\n      [DllImport("kernel32", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]\n      private static extern IntPtr FreeLibrary(IntPtr hLibModule);\n\n      public static bool CheckIsBuildinLibraryExists(string libName)\n      {\n        var hModule = LoadLibraryA(libName);\n        var isExists = hModule != IntPtr.Zero;\n        FreeLibrary(hModule);\n        return isExists;\n      }\n\n      public static List<bool> CheckIsBuildinLibraryExists(List<string> libNames)\n      {\n        return libNames.Select(s => CheckIsBuildinLibraryExists(s)).ToList();\n      }\n    }\n  }\n"@\nAdd-Type -TypeDefinition $csCode -Language CSharp\n$toChecks = [System.Collections.Generic.List[string]]@(${c.map((e=>`"${e}"`))})\n$result = [System.String]::Join(',', [Utils.Utils]::CheckIsBuildinLibraryExists($toChecks)) \nWrite-Host $result\n`,i=n.join(r.tmpdir(),a()+".ps1");t.writeFileSync(i,e,"utf-8");const l=s.execSync(`powershell.exe -File "${i}" -ExecutionPolicy RemoteSigned`);t.rmSync(i);const u=JSON.parse(`[${new TextDecoder("utf-8").decode(l).trim().toLowerCase()}]`);c.forEach(((e,t)=>{if(!u[t])throw new o(`butlin system runtime dll: ${e} is not exists`)}))})(),require("./BackgroundRemover.node"));module.exports=class{constructor(){if(this.m_strNativeHandle="0",this.m_strNativeHandle=u.RembgCreate(),"0"==this.m_strNativeHandle)throw new Error("rembg instance creation encountered a unknown error")}Dispose(){if("0"==this.m_strNativeHandle)throw new Error("rembg instance has been disposed");u.RembgFree(this.m_strNativeHandle),this.m_strNativeHandle="0"}RemoveBackground(e){if("0"==this.m_strNativeHandle)throw new Error("rembg instance not created");return u.RembgRemoveBackground(this.m_strNativeHandle,e)}};
